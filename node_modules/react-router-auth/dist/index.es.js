import React from 'react';
import PropTypes from 'prop-types';
import { Redirect, Route } from 'react-router-dom';

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};













var objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

var AuthRoute = function AuthRoute(_ref) {
  var Component = _ref.component,
      authenticated = _ref.authenticated,
      redirectTo = _ref.redirectTo,
      rest = objectWithoutProperties(_ref, ['component', 'authenticated', 'redirectTo']);

  return React.createElement(Route, _extends({}, rest, {
    render: function render(props) {
      return authenticated ? React.createElement(Component, props) : React.createElement(Redirect, { to: {
          pathname: redirectTo,
          state: { from: props.location }
        }
      });
    }
  }));
};

AuthRoute.propTypes = {
  authenticated: PropTypes.bool,
  redirectTo: PropTypes.string.isRequired,
  component: PropTypes.func.isRequired
};

AuthRoute.defaultProps = {
  authenticated: false
};

var UnauthRoute = function UnauthRoute(_ref) {
  var Component = _ref.component,
      authenticated = _ref.authenticated,
      redirectTo = _ref.redirectTo,
      rest = objectWithoutProperties(_ref, ['component', 'authenticated', 'redirectTo']);

  return React.createElement(Route, _extends({}, rest, {
    render: function render(props) {
      return authenticated ? React.createElement(Redirect, { to: {
          pathname: redirectTo,
          state: { from: props.location }
        }
      }) : React.createElement(Component, props);
    }
  }));
};

UnauthRoute.propTypes = {
  authenticated: PropTypes.bool,
  redirectTo: PropTypes.string.isRequired,
  component: PropTypes.func.isRequired
};

UnauthRoute.defaultProps = {
  authenticated: false
};

export { AuthRoute, UnauthRoute };
